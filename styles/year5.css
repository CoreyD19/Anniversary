@import url('base.css');
@import url('year1.css');
@import url('year2.css');
@import url('year3.css');
@import url('year4.css');

/* --- General Puzzle Section Styles (UNTOUCHED) --- */
.puzzle-section {
  background-color: #292929;
  padding: 2rem;
  border-radius: 10px;
  box-shadow: 0 4px 12px rgba(255, 110, 199, 0.2);
  margin-bottom: 2rem;
}

.puzzle-section h2 {
  text-align: center;
  color: #ffb6e6;
  margin-bottom: 1rem;
}

.puzzle-section p {
  text-align: center;
  margin-bottom: 1.5rem;
  font-size: 1rem;
  color: #ffcce6;
}

#generateWordSearchBtn {
  padding: 0.6rem 1.2rem;
  background-color: #e38ea0;
  border: none;
  color: white;
  font-size: 1rem;
  border-radius: 8px;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

#generateWordSearchBtn:hover {
  background-color: #d46c8b;
}

/* --- Word Search Grid Styles (Desktop-first - This is the version that works on desktop) --- */
.puzzle-grid {
  display: grid;
  grid-template-columns: repeat(20, 35px); /* Changed from 12 to 20 to match JS size */
  gap: 4px;
  justify-content: center;
  margin: 1rem auto;
  /* No overflow here, the parent 'word-search-scale-container' will handle it on mobile */
}

/* Base styles for individual grid cells */
.puzzle-grid div {
  width: 35px;
  height: 35px;
  background-color: #1e1e1e;
  color: #ffcce6;
  border: 1px solid #ffb6e6;
  font-size: 1.1rem;
  font-weight: bold;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 4px;
  box-sizing: border-box;
  user-select: none;
}

/* Ensure the letter inside the div is centered (already working from previous iteration) */
.puzzle-grid div span {
    /* Flexbox on parent div handles centering */
}

.puzzle-grid .found {
  background-color: #a4dcbe;
  color: #ffffff;
}

#word-list-display {
  margin-top: 1rem;
  font-size: 1rem;
  font-style: italic;
  color: #4b2e83;
  text-align: center;
}
.word-to-find {
  display: inline-block;
  margin: 0 6px;
  font-weight: bold;
  color: #ffcce6;
}

.tile.selected {
  outline: 2px solid #ffd700;
  background-color: #444;
}

.tile.found {
  background-color: #a4dcbe;
  color: #fff;
}
.confetti {
  position: fixed;
  top: -10px;
  font-size: 20px;
  animation: fall 3s linear forwards;
  z-index: 9999;
}

@keyframes fall {
  to {
    transform: translateY(100vh) rotate(360deg);
    opacity: 0;
  }
}

/* ---------------------------------------------------- */
/* RESPONSIVE MOBILE ADJUSTMENTS (THE NEW STRATEGY)   */
/* ---------------------------------------------------- */

/* Styles for the new scaling wrapper */
.word-search-scale-container {
  /* Desktop default: No special scaling, just contain the grid */
  display: flex;
  justify-content: center; /* Center the grid on desktop */
  overflow: visible; /* Default to visible */
  position: relative; /* Needed for potential positioning of children if scaled */
}


@media (max-width: 768px) {
  .word-search-scale-container {
    /* On mobile, center the scaled grid and allow scrolling */
    display: block; /* Change to block to manage overflow correctly */
    overflow-x: auto; /* Enable horizontal scrolling */
    -webkit-overflow-scrolling: touch; /* Smoother scrolling on iOS */
    padding: 0 0.5rem 10px; /* Add some side padding and bottom for scrollbar */
    box-sizing: border-box; /* Include padding in the width calculation */
    width: 100%; /* Ensure it takes up full width */
  }

  .puzzle-grid {
    /* These styles apply to the actual grid, but we need to calculate scale */
    /* We assume the original desktop grid width is 20 columns * 35px/column + (20-1) gaps * 4px/gap */
    /* Original grid width = (20 * 35) + (19 * 4) = 700 + 76 = 776px */
    width: 776px; /* Explicitly set the width of the grid to its desktop size */
    margin: 0; /* Remove auto margins to avoid interference with scaling */
    justify-content: flex-start; /* Align to start within the scrollable container */
  }

  /*
   * Crucial Scaling Logic:
   * This is where we calculate the scale factor.
   * You might need to adjust the `max-width` of the media query
   * or the base width you're scaling from.
   */
  .puzzle-grid { /* Apply transform directly to the grid itself, not the wrapper */
    transform-origin: top left; /* Scale from the top-left corner */
    /* Calculate scale: (viewport width - container padding) / actual grid width */
    /* Example: If viewport is 320px and puzzle-section has 0.5rem (8px) padding each side,
       available width is 320 - 16 = 304px.
       Scale = 304 / 776 = 0.39 (approx)
       You can use a value like `calc( (100vw - 1rem) / 776 )` if you want dynamic scaling,
       but often a fixed percentage is easier to manage.
    */
    transform: scale(0.40); /* Start with a fixed scale factor (e.g., 40%) */
                          /* You'll need to experiment with this value for ideal fit */
                          /* A common full-size grid (20x20, 35px cells, 4px gap) is ~776px wide.
                             To fit a 320px screen, you'd need ~0.4 scale. */
    margin-left: auto; /* Center the scaled grid horizontally if space allows */
    margin-right: auto;
  }

  /* Adjustments for the puzzle section padding on smaller screens */
  .puzzle-section {
    padding: 1rem 0; /* No horizontal padding here, wrapper will handle it */
    margin: 1rem 0; /* No horizontal margin here */
    box-shadow: none;
  }

  /* Smaller button on mobile */
  #generateWordSearchBtn {
    padding: 0.4rem 0.8rem;
    font-size: 0.85rem;
  }

  #word-list-display {
    font-size: 0.9rem;
    padding: 0 0.5rem;
  }
}

/* Specific adjustments for very small screens (e.g., iPhone SE, older Androids) */
@media (max-width: 360px) { /* Even smaller breakpoint for very narrow phones */
  .puzzle-grid {
    transform: scale(0.35); /* Adjust scale for even smaller screens */
  }
}